// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  DOCTOR
  SECRETARY
  ADMIN
}

enum NotificationMethods {
  EMAIL
  SMS
  PUSH
}

model User {
  id       String @id @default(uuid())
  username String @unique @default(cuid())
  email    String @unique
  password String
  roles    Role[] @default([USER])

  firstName   String
  lastName    String
  nationalId  String   @unique
  birthDate   DateTime
  phoneNumber String

  address String?

  notifications NotificationMethods[] @default([SMS, EMAIL, PUSH])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profession {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor[]

  @@map("professions")
}

model Doctor {
  id           String     @id @default(uuid())
  name         String
  bio          String?
  professionId String
  profession   Profession @relation(fields: [professionId], references: [id])
  userId       String
  images       String[]
  offDates     DateTime[]
  workingHours String     @default("09-17")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctors")
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String   @default(cuid())
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tokens")
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model Appointment {
  id          String            @id @default(uuid())
  patientId   String
  doctorId    String
  title       String
  description String?           @default("")
  status      AppointmentStatus @default(PENDING)
  price       Float             @default(0)

  date DateTime
  hour String   @default("00:00")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Note {
  id            String   @id @default(uuid())
  userId        String
  appointmentId String
  type          String
  title         String
  description   String
  files         String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}
